generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  @@map("contacts")
}

model DemoRequest {
  id          String        @id @default(cuid())
  name        String
  email       String
  company     String?
  projectType String
  budget      String?
  timeline    String?
  description String
  createdAt   DateTime      @default(now())
  status      RequestStatus @default(PENDING)

  @@map("demo_requests")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      UserRole  @default(ADMIN)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  blogPosts BlogPost[]

  @@map("users")
}

model PortfolioSection {
  id          String      @id @default(cuid())
  name        String
  displayName String
  sectionType SectionType
  title       String?
  subtitle    String?
  description String?
  content     Json?
  settings    Json?
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("portfolio_sections")
}

model Project {
  id                  String        @id @default(cuid())
  title               String
  slug                String        @unique
  description         String
  shortDesc           String?
  image               String?
  technologies        String[]
  featured            Boolean       @default(false)
  flagship            Boolean       @default(false)
  isActive            Boolean       @default(true)
  status              ProjectStatus @default(READY)
  sortOrder           Int           @default(0)
  liveUrl             String?
  githubUrl           String?
  highlights          String[]
  detailedDescription String?
  challenges          String?
  solutions           String?
  results             String?
  clientName          String?
  projectDuration     String?
  teamSize            String?
  myRole              String?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  showWipWarning      Boolean       @default(true)
  wipWarningText      String?
  wipWarningEmoji     String?       @default("ðŸš§")

  @@map("projects")
}

model Skill {
  id        String        @id @default(cuid())
  name      String
  category  SkillCategory
  level     Int
  icon      String?
  color     String?
  isActive  Boolean       @default(true)
  sortOrder Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  progressions SkillProgression[]

  @@map("skills")
}

model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("text")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  excerpt     String?
  content     String
  coverImage  String?
  categoryId  String
  category    BlogCategory  @relation(fields: [categoryId], references: [id])
  tags        String[]
  status      BlogStatus    @default(DRAFT)
  
  // SEO & Metadata
  metaTitle       String?
  metaDescription String?
  
  // Author info
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  
  // Engagement
  views       Int           @default(0)
  likes       Int           @default(0)
  
  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  comments    BlogComment[]
  
  @@map("blog_posts")
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  author    String
  email     String
  website   String?
  
  // Moderation
  isApproved Boolean @default(false)
  
  // Relations
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("blog_comments")
}

model BlogCategory {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String @default("#3B82F6") // Default blue
  icon        String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  // Relations
  posts       BlogPost[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("blog_categories")
}

model PortfolioPage {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String?
  content     Json?
  metaTitle   String?
  metaDescription String?
  isPublished Boolean   @default(false)
  isHomepage  Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("portfolio_pages")
}

enum RequestStatus {
  PENDING
  CONTACTED
  IN_PROGRESS
  COMPLETED
  DECLINED
}

enum UserRole {
  ADMIN
  VIEWER
}

enum SectionType {
  HERO
  ABOUT
  PROJECTS
  SKILLS
  CONTACT
  CUSTOM
}

enum ProjectStatus {
  WIP
  READY
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  TOOLS
  DESIGN
  ACADEMIC
  OTHER
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Academic Progression Models
model AcademicProgram {
  id            String   @id @default(cuid())
  name          String
  degree        String   // "BSc International Relations"
  institution   String   // "University of London"
  accreditation String?  // "Academic direction from the London School of Economics and Political Science"
  description   String?
  startDate     DateTime
  expectedEnd   DateTime
  currentYear   Int      @default(1)
  totalYears    Int      @default(4)
  
  // Academic details
  mode          String?  // "Online", "Local teaching centre", etc.
  status        AcademicStatus @default(ACTIVE)
  
  // Relations
  progressions  SkillProgression[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("academic_programs")
}

model SkillProgression {
  id            String   @id @default(cuid())
  skillId       String
  skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  // Academic Program relation
  programId     String?
  program       AcademicProgram? @relation(fields: [programId], references: [id], onDelete: SetNull)
  
  // Progression data
  currentLevel  Int      @default(0)   // 0-100 scale
  targetLevel   Int      @default(100) // Expected level at completion
  
  // Year-by-year progression
  year1Target   Int?     // Target level after year 1
  year2Target   Int?     // Target level after year 2
  year3Target   Int?     // Target level after year 3
  year4Target   Int?     // Target level after year 4
  
  // Progression tracking
  lastUpdated   DateTime @default(now())
  autoUpdate    Boolean  @default(true)
  
  // Skills categorization for IR
  isAcademicSkill Boolean @default(false) // Skills gained through academic study
  isTechnicalSkill Boolean @default(false) // Technical skills from development
  
  @@map("skill_progressions")
}

enum AcademicStatus {
  ACTIVE
  COMPLETED
  DEFERRED
  WITHDRAWN
}
