// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  @@map("contacts")
}

model DemoRequest {
  id          String   @id @default(cuid())
  name        String
  email       String
  company     String?
  projectType String
  budget      String?
  timeline    String?
  description String
  createdAt   DateTime @default(now())
  status      RequestStatus @default(PENDING)

  @@map("demo_requests")
}

enum RequestStatus {
  PENDING
  CONTACTED
  IN_PROGRESS
  COMPLETED
  DECLINED
}

// Admin User for Portfolio Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Hashed password
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  VIEWER
}

// Portfolio Content Management
model PortfolioSection {
  id            String       @id @default(cuid())
  name          String       // Internal identifier (hero, about, projects, etc.)
  displayName   String       // User-friendly name
  sectionType   SectionType
  title         String?
  subtitle      String?
  description   String?
  content       Json?        // Flexible content storage
  settings      Json?        // Section-specific settings
  isActive      Boolean      @default(true)
  sortOrder     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("portfolio_sections")
}

enum SectionType {
  HERO
  ABOUT
  PROJECTS
  SKILLS
  CONTACT
  CUSTOM
}

// Project Management
model Project {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  description  String
  shortDesc    String?
  image        String?
  technologies String[]  // Array of tech stack
  featured     Boolean   @default(false)
  flagship     Boolean   @default(false)  // Flagship projects - premium showcase
  isActive     Boolean   @default(true)
  status       ProjectStatus @default(READY) // WIP or Ready status
  sortOrder    Int       @default(0)
  liveUrl      String?
  githubUrl    String?
  highlights   String[]  // Key features/achievements
  
  // Flagship-specific fields (mandatory when flagship = true)
  detailedDescription String?  // Extended description for flagship projects
  challenges          String?  // Technical challenges overcome
  solutions           String?  // Solutions implemented
  results             String?  // Project outcomes/results
  clientName          String?  // Client or company name
  projectDuration     String?  // e.g., "3 months", "6 weeks"
  teamSize            String?  // e.g., "Solo project", "Team of 4"
  myRole              String?  // Your specific role in the project
  
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("projects")
}

enum ProjectStatus {
  WIP
  READY
}

// Skills Management
model Skill {
  id         String      @id @default(cuid())
  name       String
  category   SkillCategory
  level      Int         // 1-100 proficiency level
  icon       String?     // Icon name or emoji
  color      String?     // Custom color
  isActive   Boolean     @default(true)
  sortOrder  Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("skills")
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  TOOLS
  DESIGN
  OTHER
}

// Site Settings
model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique  // e.g., "site_title", "hero_image", "contact_email"
  value       String   // The setting value
  type        String   @default("text") // "text", "number", "boolean", "json"
  description String?  // Human-readable description
  isPublic    Boolean  @default(false) // Whether this setting can be accessed publicly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}
